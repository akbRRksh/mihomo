name: MiHomo-Alpha
on:
  workflow_dispatch
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/mihomo
          ref: Alpha
      
      - name: Get Latest tag
        id: latest_tag
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: MetaCubeX/mihomo
          excludes: prerelease, draft
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.4'
      
      - name: Install Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip android-ndk-r25b-linux.zip -d $HOME/android-ndk
          echo "ANDROID_NDK_HOME=$HOME/android-ndk/android-ndk-r25b" >> $GITHUB_ENV
      
      - name: Versioning
        run: |
          sudo timedatectl set-timezone "Asia/Jakarta"
          echo "NAME=mihomo" >> $GITHUB_ENV
          BUILDTIME=$(date)
          echo "BUILDTIME=$BUILDTIME" >> $GITHUB_ENV
          HASH_COMMIT=$(git rev-parse --short HEAD)
          TAG_RELEASE=${{ steps.latest_tag.outputs.release }}
          RELEASE_COMMIT_SHA=$(curl -s "https://api.github.com/repos/MetaCubeX/mihomo/git/ref/tags/${TAG_RELEASE}" | jq -r '.object.sha' | cut -c -7)
          VERSION=alpha-${HASH_COMMIT}
          
          echo "URL_CHANGE=https://www.github.com/metacubex/mihomo/compare/${RELEASE_COMMIT_SHA}...${HASH_COMMIT}" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAGS=with_gvisor,with_low_memory" >> $GITHUB_ENV
          echo "LDFLAGS=-X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME} ${TAG_RELEASE}' -w -s -buildid=" >> $GITHUB_ENV
          echo "C_COMPILER_ANDROID=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "C_COMPILER_LINUX=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Build Android ARM64
        run: |
          CGO_ENABLED=1 \
          CC=${{ env.C_COMPILER_ANDROID }} \
          GOARCH=arm64 \
          GOOS=android \
          go build -tags "${{ env.TAGS }}" \
          -trimpath \
          -ldflags "${{ env.LDFLAGS }}" \
          -o ./${NAME}-android-arm64
      
      - name: Build Linux ARM64
        run: |
          CGO_ENABLED=1 \
          CC=${{ env.C_COMPILER_LINUX }} \
          GOARCH=arm64 \
          GOOS=linux \
          go build -tags "${{ env.TAGS }}" \
          -trimpath \
          -ldflags "${{ env.LDFLAGS }}" \
          -o ./${NAME}-linux-arm64
      
      - name: Archive Android ARM64
        id: archive_android
        run: |
          GZ_ANDROID="${NAME}-android-arm64-${VERSION}.tgz"
          tar -caf $GZ_ANDROID ./${NAME}-android-arm64
          echo "gz_android=$GZ_ANDROID" >> $GITHUB_OUTPUT
          SHA_ANDROID=$(sha256sum $GZ_ANDROID | cut -d ' ' -f1)
          echo "sha_android=$SHA_ANDROID" >> $GITHUB_OUTPUT
      
      - name: Archive Linux ARM64
        id: archive_linux
        run: |
          GZ_LINUX="${NAME}-linux-arm64-${VERSION}.tgz"
          tar -caf $GZ_LINUX ./${NAME}-linux-arm64
          echo "gz_linux=$GZ_LINUX" >> $GITHUB_OUTPUT
          SHA_LINUX=$(sha256sum $GZ_LINUX | cut -d ' ' -f1)
          echo "sha_linux=$SHA_LINUX" >> $GITHUB_OUTPUT
      
      - name: Save Version
        run: |
          echo "${{ env.VERSION }}" > version.txt
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "build-artifacts"
          path: |
            *.tgz
            version.txt

  upload:
    permissions: write-all
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/
      
      - name: Move to folder
        run: |
          mkdir release
          cp bin/build-artifacts/* release/
          ls -R release
      
      - name: Load VERSION
        run: |
          VERSION=$(cat release/version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Tag Repo
        uses: richardsimko/update-tag@v1
        with:
          tag_name: ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          files: release/*
          prerelease: false
          generate_release_notes: true