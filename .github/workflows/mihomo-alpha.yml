name: MiHomo-Alpha
on:
  - workflow_dispatch
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/mihomo
          ref: Alpha
      - name: Get Latest tag
        id: latest_tag
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: MetaCubeX/mihomo
          excludes: prerelease, draft
      - name: Versioning
        run: |
          ###
          sudo timedatectl set-timezone "Asia/Jakarta"
          echo "NAME=mihomo" >> $GITHUB_ENV
          BUILDTIME=$(date)
          echo "BUILDTIME=$BUILDTIME" >> $GITHUB_ENV
          HASH_COMMIT=$(git rev-parse --short HEAD)
          echo "URL_COMMIT=https://www.github.com/metacubex/mihomo/commit/$HASH_COMMIT" >> $GITHUB_ENV
          COMMIT=$(git log --oneline -n 5 --no-decorate | sed 's/^[0-9a-f]* //' | sed 's/^/— /')
          echo "COMMIT=$COMMIT" >> $GITHUB_ENV
          VERSION=${{ steps.latest_tag.outputs.release }}-${HASH_COMMIT}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAGS=with_gvisor,with_low_memory" >> $GITHUB_ENV
          echo "LDFLAGS=-X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid=" >> $GITHUB_ENV
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable
      - name: Build
        run: |
          ###
          GOARCH=arm64 GOOS=android go build -tags ${TAGS} -trimpath -ldflags "${LDFLAGS}" -o ./${NAME}
      #- name: Install UPX
        #uses: crazy-max/ghaction-upx@v2
        #with:
          #install-only: true
      #- name: Run UPX
        #run: upx --best ./${NAME}
      - name: Archive
        id: archive
        run: |
          ###
          GZ="${NAME}-android-arm64-${VERSION}.tgz"
          tar -caf $GZ ./${NAME}
          echo "gz=$GZ" >> $GITHUB_OUTPUT
          SHA=$(cat $GZ 2>/dev/null | sha256sum | cut -d ' ' -f1)
          echo "sha=$SHA" >> $GITHUB_OUTPUT
      - name: Setup jq
        uses: dcarbone/install-jq-action@v2
      - name: Upload to GoFile
        id: upload
        run: |
          FILE=${{ steps.archive.outputs.gz }}
          if [[ ! -f $FILE ]]; then
            echo "File $FILE not exist!"
            ls -al ./
            exit 1
          fi
          FILENAME=$(basename $FILE)
          echo "[+] Uploading $FILENAME to GoFile"
          GOFILE_SERVER=$(curl -X GET 'https://api.gofile.io/servers' | jq -r '.data.servers[0].name')
          RESPONSE=$(curl -X POST "https://${GOFILE_SERVER}.gofile.io/contents/uploadfile" -F "file=@$FILE")
          URL=$(echo $RESPONSE | jq -r '.data.downloadPage')
          MD5=$(echo $RESPONSE | jq -r '.data.md5')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "md5=$MD5" >> $GITHUB_OUTPUT
          echo "[+] Done, your file url is $URL"
      - name: Write message
        id: write
        run: |
          ###
          echo "[+] Write message."
          file=message.nfo
          cat > $file <<EOF
          ╔════•ೋೋ════╗
          ║          MiHomo         ║
          ╚════•ೋೋ════╝

          + BuildTime: ${{ env.BUILDTIME }}
          + Version: ${{ env.VERSION }}
          + Tags: ${{ env.TAGS }}
          + SHA: ${{ steps.archive.outputs.sha }}

          [Commit](${{ env.URL_COMMIT }}):
          ${{ env.COMMIT }}

          [Pixeldrain-dl](${{ steps.upload.outputs.url }})
          EOF
          ###
          echo "file=$file" >> $GITHUB_OUTPUT
          echo "[+] Done."
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: MiHomo-Build
          path: ${{ steps.archive.outputs.gz }}
    
